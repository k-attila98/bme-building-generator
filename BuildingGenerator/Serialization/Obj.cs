using BuildingGenerator.Shared;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BuildingGenerator.Serialization
{
    public class Obj
    {
        private List<Vertex> _vertices = new List<Vertex>();
        private List<Face> _faces = new List<Face>();
        private List<TextureVertex> _textureVertices = new List<TextureVertex>();
        public string UseMtl { get; set; }
        public string Mtl { get; set; }

        public Obj(List<Transform> placedPrefabs)
        {
            foreach (var placedPrefab in placedPrefabs)
            {
                foreach (var face in placedPrefab.Faces)
                {
                    foreach (var vertex in face.Vertices)
                    {
                        _vertices.Add(vertex);
                    }

                    foreach (var textureVertex in face.TextureVertices)
                    {
                        _textureVertices.Add(textureVertex);
                    }
                    _faces.Add(face);
                }
            }


        }

        private void _WriteHeader(StreamWriter writer, string[] headerStrings)
        {
            if (headerStrings == null || headerStrings.Length == 0)
            {
                writer.WriteLine("# Generated by ObjParser");
                return;
            }

            foreach (var line in headerStrings)
            {
                writer.WriteLine("# " + line);
            }
        }

        public void WriteObjFile(string[] headerStrings)
        {
            using (StreamWriter writer = new StreamWriter(File.Open($"../../../Generated/building-{DateTime.Now.ToString("yyyy-MM-ddTHH-mm-ss")}.obj", System.IO.FileMode.Create)))
            {
                // Write some header data
                _WriteHeader(writer, headerStrings);

                if (!string.IsNullOrEmpty(Mtl))
                {
                    writer.WriteLine("mtllib " + Mtl);
                }

                _vertices.ForEach(v => writer.WriteLine(v));
                _textureVertices.ForEach(tv => writer.WriteLine(tv));
                string lastUseMtl = "";
                foreach (Face face in _faces)
                {
                    if (face.UseMtl != null && !face.UseMtl.Equals(lastUseMtl))
                    {
                        writer.WriteLine("usemtl " + face.UseMtl);
                        lastUseMtl = face.UseMtl;
                    }
                    writer.WriteLine(face);
                }
            }
        }

        public string WriteObjString(string[] headerStrings)
        {
            //using (var outStream = File.OpenWrite(path))
            string ret;
            using (var strStream = new MemoryStream())
            {
                var writer = new StreamWriter(strStream);

                // Write some header data
                _WriteHeader(writer, headerStrings);

                if (!string.IsNullOrEmpty(Mtl))
                {
                    writer.WriteLine("mtllib " + Mtl);
                }

                _vertices.ForEach(v => writer.WriteLine(v));
                _textureVertices.ForEach(tv => writer.WriteLine(tv));
                string lastUseMtl = "";
                foreach (Face face in _faces)
                {
                    if (face.UseMtl != null && !face.UseMtl.Equals(lastUseMtl))
                    {
                        writer.WriteLine("usemtl " + face.UseMtl);
                        lastUseMtl = face.UseMtl;
                    }
                    writer.WriteLine(face);
                }
                writer.Flush();
                strStream.Position = 0; 


                var reader = new StreamReader(strStream);
                
                ret = reader.ReadToEnd();

                reader.Dispose();
                writer.Dispose();
                
            }

            return ret;
            
        }
    }
}
